Before:
  command! SetIndent setlocal autoindent cindent expandtab tabstop=8 cinoptions+=(1s,u0

# -----------------------

Given (parens and stepover):
  void f

Do (open paren):
  A(
Expect (closed paren):
  void f()

Do (stepover):
  A()|
Expect:
  void f()|

Do (complete near non-word):
  A;\<Esc>i(
Expect:
  void f();

Do (open curly inside parens):
  A({|
Expect:
  void f({|})

Do (open paren before paren):
  A(\<Esc>lD$i(|
Expect:
  void f(|(

# -----------------------

Given (stepover existing):
  void f)

Do:
  $i)|
Expect:
  void f)|

# -----------------------

Given (newline ready text):
  void f(){}

Execute:
  SetIndent

Do:
  $i\<Enter>|
Expect:
  void f(){
          |
  }

# -----------------------

Given (newline parens, with cindent):
  Ok()

Execute:
  SetIndent

Do:
  $i\<Enter>|
Expect:
  Ok(
          |
  )

# -----------------------

Given (newline parens, without cindent):
  Ok()

Execute:
  SetIndent
  setlocal nocindent

Do:
  $i\<Enter>|
Expect:
  Ok(
  |
  )

# -----------------------

Given (don't parenthesize/quote):
  needs_surrounding)
  I

Do:
  I(
Expect:
  (needs_surrounding)
  I

Do:
  jA'm
Expect:
  needs_surrounding)
  I'm

Given (don't parenthesize/quote non-alpha):
  (a, tuple)

Do:
  I<\<Esc>A>
Expect:
  <(a, tuple)>

Do:
  I(\<Esc>A)
Expect:
  ((a, tuple))

Do:
  I"\<Esc>A"
Expect:
  "(a, tuple)"

# -----------------------

Given (special cases):
  line a
  line b
  line c()

Do (delete pair):
  A(\<BS>
Expect:
  line a
  line b
  line c()

Execute:
  setlocal backspace+=start
Do (delete existing pair):
  G$i\<BS>|
Expect:
  line a
  line b
  line c|

Do (redo):
  A(\<Esc>j.
Expect:
  line a()
  line b()
  line c()

Do (backslash):
  A\(
Expect:
  line a\(
  line b
  line c()

Do (keep close paren despite being next to one):
  G$if(
Expect:
  line a
  line b
  line c(f())

# -----------------------

Given (quoting):
  so they say

Do (quote):
  I"
Expect:
  "so they say

Do (start string):
  o"hi|
Expect:
  so they say
  "hi|"

Do (stepover quote):
  o"hi"|
Expect:
  so they say
  "hi"|

# -----------------------

Given (quote before/after):
  ab xy()
  12 34
  - a

Do (quote inside parens):
  $i'x
Expect:
  ab xy('x')
  12 34
  - a

Do (quote inside parens and stepover):
  $i'x'
Expect:
  ab xy('x')
  12 34
  - a

Do (quote before letter):
  i'
Expect:
  'ab xy()
  12 34
  - a

Do (quote before letter, non-start-of-line):
  f a'
Expect:
  ab 'xy()
  12 34
  - a

Do (quote before number):
  ji'
Expect:
  ab xy()
  '12 34
  - a

Do (quote before number, non-start-of-line):
  jf a'
Expect:
  ab xy()
  12 '34
  - a

Do (quote before non-alnum):
  2ji'
Expect:
  ab xy()
  12 34
  '- a

Do (quote before non-alnum, non-start-of-line):
  2ji \<Esc>I'
Expect:
  ab xy()
  12 34
   '- a

Do (double-quote before non-alnum):
  2ji"
Expect:
  ab xy()
  12 34
  "- a

Do (double-quote before non-alnum, non-start-of-line):
  2ji \<Esc>I"
Expect:
  ab xy()
  12 34
   "- a

# -----------------------

Given python (triple quoting):
  def f():

Execute:
  SetIndent
Do (triple quote):
  o"""
Expect:
  def f():
          """"""

Do (triple quote with contents):
  o"""hi|
Expect:
  def f():
          """hi|"""

Do (triple quote with contents and stepover):
  o"""hi"""|
Expect (stepover currently doesn't work for multi-char closes):
  def f():
          """hi"|""

# -----------------------

Given:
  n

Do:
  A << 1
Expect:
  n << 1

# -----------------------

Given rust:
  fn f() {
    a::
  }

Do:
  jA<hi
Expect:
  fn f() {
    a::<hi>
  }

Do:
  jAx < y
Expect:
  fn f() {
    a::x < y
  }

Do:
  cGVec<xyz<
Expect:
  Vec<xyz<>>

# -----------------------

Given rust:
  a.filter(

Do:
  A|x
Expect:
  a.filter(|x|

Do:
  A||x
Expect:
  a.filter(||x

Do:
  A|x| x.0
Expect:
  a.filter(|x| x.0

Do:
  A|x| x | 1)
Expect:
  a.filter(|x| x | 1)

Do:
  A|x\<Esc>A x | 1)
Expect:
  a.filter(|x| x | 1)

Do:
  Slet a = |x
Expect:
  let a = |x|

# -----------------------
Given rust (lifetimes):
  Trait

Do:
  Sfunc('c\<Esc>olet ch = 'x
Expect:
  func('c')
  let ch = 'x'

Do:
  A + 'a\<Enter>+'a
Expect:
  Trait + 'a
  +'a

Do:
  A\<Enter>where 'a:
Expect:
  Trait
  where 'a:

Do:
  A: 'a,
Expect:
  Trait: 'a,

Do:
  A<'a|
Expect:
  Trait<'a|>

Do:
  A<'a,|
Expect:
  Trait<'a,|>

Do:
  A<\<Esc>$i'a
Expect:
  Trait<'a>

Do:
  A<X\<Esc>$i, 'a
Expect:
  Trait<X, 'a>

#Before:
#  function! s:assert_at(line, col)
#    let [off, curswant] = [0, 1]
#    let expected = [str2nr(a:line), str2nr(a:col), off, curswant]
#    " echom expected getcurpos()[1:]
#    Assert getcurpos()[1:] ==# expected
#  endfunction
#  command! -nargs=+ AssertCursorAt call s:assert_at(<f-args>)
